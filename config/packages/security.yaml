security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        default:
            entity:
                class: Athorrent\Database\Entity\User

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            lazy: true
            provider: default

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            form_login:
                login_path: /
                check_path: login_check
                default_target_path: /user/files/
                failure_handler: Athorrent\Security\AuthenticationFailureHandler
                always_use_default_target_path: false
                enable_csrf: true

            logout:
                path: /logout
                target: /

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: true

            remember_me:
                secret: '%kernel.secret%'
                name: REMEMBER_ME
                always_remember_me: true
                secure: true

            login_throttling: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/(?:[a-z]{2}/)?administration', roles: ROLE_ADMIN }
        - { path: '^/(?:[a-z]{2}/)?(?:search|user)', roles: ROLE_USER }

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_ALLOWED_TO_SWITCH]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
